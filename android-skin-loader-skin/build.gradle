apply plugin: 'com.android.application'

android {
    signingConfigs {
        config {
            keyAlias 'fengjun'
            keyPassword 'fengjun'
            storeFile file('keystore.key')
            storePassword 'fengjun'
        }
    }
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.example.android_skin_laoder_skin"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

final def TARGET_SKIN_DIR = '../skin-package/'
final def skinName = "BlackFantacy.skin"

gradle.projectsEvaluated {

    assembleRelease.doLast {
        println("=====================assembleRelease.doLast.begin.=========================")
        def dir = new File(TARGET_SKIN_DIR)
        if (!dir.exists()) {
            dir.mkdirs()
        }
        def f = new File(TARGET_SKIN_DIR + skinName)
        if (f.exists()) {
            f.delete()
            println("=====================assembleRelease.doLast.delete=========================")
        }
        copy {
            from('build/outputs/apk/release')
            into(TARGET_SKIN_DIR)
            include '*.apk'
            exclude '**/*-unaligned.apk'
            rename('android-skin-loader-skin-release.apk', skinName)
        }
        println("=====================assembleRelease.doLast success.=========================")
    }

    assembleDebug.doLast {
        println("=====================assembleDebug.doLast.begin.=========================")
        def dir = new File(TARGET_SKIN_DIR)
        if (!dir.exists()) {
            dir.mkdirs()
        }
        def f = new File(TARGET_SKIN_DIR + skinName)
        println("=====================assembleDebug.doLast.savePath ${f.absolutePath} =========================")
        println("=====================assembleDebug.doLast.exists ${f.exists()} =========================")
        if (f.exists()) {
            f.delete()
            println("=====================assembleDebug.doLast.delete=========================")
        }
        copy {
            from('build/outputs/apk/debug')
            into(TARGET_SKIN_DIR)
            include '*.apk'
            exclude '**/*-unaligned.apk'
            rename('android-skin-loader-skin-debug.apk', skinName)
        }
        println("=====================assembleDebug.doLast success.=========================")
    }
}